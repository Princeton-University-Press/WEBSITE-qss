# This workflow will fetch from the parent repo, check for changes in folders, and then zip, deploy, and notify if any have changed.

name: Sync, Deploy, and Notify

# Run workflow via cron at 12:30 ET
on: 
  schedule:
    - cron: "30 05 * * *"
jobs:
  check:

    name: Check upstream
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: Fetch upstream
      uses: 135e2/sync-upstream-repo@v0.1.5
      with:
      #Git upstream repo
        upstream_repo: https://github.com/kosukeimai/qss.git
        upstream_branch: master
        local_branch: master
    - name: check modified files
      id: check_files
      run: |
        echo "=============== list modified files ==============="
        git diff --name-only HEAD^ HEAD

        echo "========== check paths of modified files =========="
        git diff --name-only HEAD^ HEAD > files.txt
        while IFS= read -r file
        do
          echo $file
          if [[ $file != Intro/* ]]; then
            echo "This modified file is not under the 'Intro' folder."
            echo "::set-output name=run_job::false"
            break
          else
            echo "::set-output name=run_job::true"
          fi
        done < files.txt

  deploy_notify:
    name: Deploy zip files to S3 and notify textbooks team
    needs: check
    if: needs.check.outputs.run_job == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: papeloto/action-zip@v1
        with:
          files: Intro/
          dest: Intro.zip
      - name: run for 'Intro' folder
        run: echo "This job runs only when all the modified files are under the 'Intro' folder."
     - name: Upload zip to S3 bucket
       uses: tpaschalis/s3-sync-action@master
       with:
         args: --acl public-read
       env:
         FILE: ./Intro.zip
         AWS_REGION: 'us-east-1'
         AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

